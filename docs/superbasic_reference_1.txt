KEYWORD: !
! is an indirection operator that does a similar job to DEEK and DOKE, e.g.
accesses memory. It can be used either in unary fashion (!47 reads the word at
location 47) or binary (a!4 reads the word at the value in address a+4). It can
also appear on the left-hand side of an assignment statements when it functions
as a DOKE, writing a 16 bit value in low/high order.
It reads or writes a 16 bit address in the 6502 memory map.

    10 !a = 42
    20 print !a
    30 print a!b
    40 a!b=12


KEYWORD: ' and rem
Comment. ' and rem are synonyms.  The rest of the line is ignored. The only
difference between the two is when listing, ' comments show up in reverse to
highlight them. Remarks should be in quotes for syntactic consistency.

    10 ' "This is a title comment"
    20 REM
    30 REM "Another comment"

KEYWORD: # and $
# and $ are used to type variables. # is a floating point value, $ is a string.
The default type is integer. Variables are not stored internally by name but by
reference. This means they are quick to access but means they are always in
existence from the start of a program if used in it. Integers are 32 bit
; Floats have a 31 bit mantissa and byte exponent.
So variables and arrays are as follows:

    100 an_integer  = 42
    110 a_float#  = 3.14159
    120 a_string$ = "hello world"


KEYWORD: ?
? is an indirection operator that does a similar job to PEEK and POKE, e.g.
accesses memory. It is the same as ? except it operates on a byte level.

    100 ?a = 42
    110 print ?a
    120 print a?b
    130 a?b=12


KEYWORD: $
Hexadecimal constant prefix. $2A is the same as the decimal constant 42.

    100 print $2a
    110 !$7ffe = 31702


KEYWORD: *
Multiply

    100 print 4*2


KEYWORD: +
Add or string concatenation.

    100 sum = 4+2
    110 prompt$ = "hello "+"world !"


KEYWORD: -
Subtract

    100 print 44 – 2


KEYWORD: %
Binary modulus operator. The second value must be non-zero.

    100 print 42 % 5


KEYWORD: .
Sets the following label to the current assembler address. So the example below
sets the label 'mylabel' at the current address and you can write things like
bra mylabel. Note also that this is an integer variable.

    100 .mylabel


KEYWORD: / and \
Signed division. An error occurs if the divisor is zero. Backslash is integer
division, forwar slash returns a floating point value.

    100 print 22/7
    110 print 22\7


KEYWORD: < <= <> = > >=
Comparison binary operators, which return 0 for false and -1 for true. They can
be used to either compare two numbers or two strings.

    100 if a<42 then "a is not the answer to life the universe and everything"
    110 if name$="" then input name$


KEYWORD: @
Returns the address of a l-expr, normally this is a variable of some sort, but
it can be an array element or even an indirection. (print @!42 prints 42, the
address of expression !42, not that it's useful at all ….)

    100 print @fred, @a(4)



KEYWORD: &
Binary and operator. This is a binary operator not a logical, e.g. it is the
binary and not a logical and so it can return values other than true and false

    100 print count & 7


KEYWORD: ^
Binary exclusive or operator. This is a binary operator not a logical, e.g. it
is the binary and not a logical and so it can return values other than true
and false

    100 print a^$0E


KEYWORD: |
Binary or operator. This is a binary operator not a logical, e.g. it is the
binary and not a logical and so it can return values other than true and false

    100 print read.value | 4


KEYWORD: << and >>
Binary operators which shift an integer left or right a certain number of times
logically. Much quicker than multiplication.

    100 print a << 2,32 >> 2


KEYWORD: abs()
Returns the absolute value of the parameter

    10 print abs(-4)


KEYWORD: alloc()
Allocate the given number of bytes of memory and return the address. Can be
used for data structures or program memory for the assembler.

    10 myAssemblerCode = alloc(128)


KEYWORD: asc()
Returns the ASCII value of the first character in the string, or zero if the
string is empty.

10 print asc("*")


KEYWORD: assemble
Initialises an assembler pass. Apart from the simplest bits of code, the
assembler is two pass. It has two parameters. The first is the location in
memory the assembled code should be stored, the second is the mode. At present
there are two mode bits ; bit 0 indicates the pass (0 1st pass, 1 2nd pass)
and bit 1 specifies whether the code is listed as it goes. Normally these
values will be 0 and 1, as the listing is a bit slow. 6502 mnemonics are
typed as is. Two passes will normally be required by wrapping it in a
for/next loop

    100 assemble $6000,1:lda #42:sta count:rts

Normally these are wrapped in a loop for the two passes for forward references.

    100 for pass = 0 to 1
    110 assemble $6000,pass
    120 bra forward
    130 <some code>
    140 .forward:rts
    150 next

This is almost identical to the BBC Microcomputer's inline assembler.


KEYWORD: assert
Every good programming language should have assert. It verifies contracts and
detects error conditions. If the expression following is zero, an error is
produced.

    100 assert myage = 42


KEYWORD: bitmap
Turns the bitmap on or off, or clears it, or sets its address (the default
address is $10000). Only one bitmap is used in BASIC, but you can use others
by accessing I/O. Keywords are ON OFF CLEAR <colour> AT <address> and can be
chained like the example below, or not. On or Off without an at will reset
the address.

    100 bitmap at $18000 on clear $03
    110 bitmap at $18000 on:bitmap clear $03


KEYWORD: bload
Loads a file into memory. The 2nd parameter is the address in full memory
space, *not* the 6502 CPU address. In the default set up, for the RAM area
(0000-7FFF) this will however be the same.

So the example below loads the binary file mypic.bin into the BASIC bitmap,
which is stored in MMU page 8 onwards.

    100 bitmap on:bitmap clear 1
    110 bload "mypic.bin",$10000


KEYWORD: bsave
Saves a chunk of memory into a file. The 2nd parameter is the address in full
memory space, *not* the 6502 CPU address. The 3rd parameter is the number of
bytes to save.

In the default set up, for the RAM area (0000-7FFF) this will however be
the same.

    100 bsave "memory.space",$0800,$7800


KEYWORD: chr$()
Convert an ASCII integer to a single character string.


    100 print chr$(42)


KEYWORD: circle
Draws a circle, using the standard syntax. The vertical height defines the
radius of the circle. See the section on graphics for drawing options

    100 circle here solid to 200,200


KEYWORD: cprint
Operates the same as the print command, but control characters
(e.g. 00-1F,80-FF) are printed using the characters from the FONT memory, not
as control characters. The example below prints a horizontal upper bar
character, not a new line.

    100 cprint chr$(13);


KEYWORD: cursor
Turns the flashing cursor on or off

    100 cursor on


KEYWORD: dir
Shows all the files in the current drive.

    100 dir


KEYWORD: dim
Dimension number or string arrays with up to two dimensions, with a maximum of
254 elements in each dimension.

    100 dim a$(10),a_sine#(10)
    110 dim name$(10,2)


KEYWORD: drive
Sets the current drive for load save. The default drive is zero.

    100 drive 1


KEYWORD: end
Ends the current program and returns to the command line

    100 end


KEYWORD: event()
Event tracks time. It is normally used to activate object movement or events
in a game or other events, and generates true at predictable rates. It takes
two parameters ; a variable and an elapsed time.
If that variable is zero, then this function doesn't return true until after
that many tenths of seconds has elapsed. If it is non-zero, it tracks repeated
events, so if you have event(evt1,70) this will return true every second – the
clock operates at the timer rate, 70Hz.
Note that if a game pauses the event times will continue, so if you use it to
have an event every 20 seconds, this will work – but if you pause the game,
then it will think the game time has elapsed. One way out is to zero the event
variables when leaving pause – this will cause it to fire after another
20 seconds.
If the event variable is set to -1 it will never fire, so this can be used to
create one shots by setting it to -1 in the conditional part of the line
An example is better, this prints Hello once a second.

    100 repeat
    110 if event(myevent1,70) then print "Hello"
    120 until false


KEYWORD: explode
Simple command that generate a simple sound effect

    100 explode


KEYWORD: false
Returns the constant zero.

    100 print false


KEYWORD: for next
A loop which repeats code a fixed number of times, which must be executed at
least once. The step is 1 for to and -1 for downto. The final letter on next
is not supported.

    100 for i = 1 to 10:print i:next i
    110 for i = 10 downto 1:print i:next


KEYWORD: frac()
Return the fractional part of a number


    100 print frac(3.14159)


KEYWORD: get() and get$()
Wait for the next key press then , return either the character as a string, or
as the ASCII character code.

    100 print "Letter ";get$()


KEYWORD: getdate$(n)
Reads the current date from the clock returning a string in the format
"dd:mm:yy". The parameter is ignored.

    100 print "Today is ";getdate$(0)


KEYWORD: gettime$(n)
Reads the current time from the clock returning a string in the format
"hh:mm:ss". The parameter is ignored.

    100 print "It is now ";gettime$(0)


KEYWORD: gfx
Sends three parameter command directly to the graphics subsystem. Often the
last two parameters are coordinates (not always).  It is not advised to use
this for general use as programs would be somewhat unreadable.
This is a direct call to the graphics library. The parameters are described in
graphics.txt in the documents directory in the github. Use of this is rare.

    100 gfx 22,130,100


KEYWORD: gosub
Call a routine at a given line number. This is provided for compatibility only.
Do not use it except for typeins of old listings or I will hunt you down and
torture you.

    100 gosub 1000


KEYWORD: goto
Transfer execution to given line number. See GOSUB ; same result. If it's for
typing in old programs, fair enough, but please don't use it for new code.

    100 goto 666:rem "will happen if you use goto. you don't need it"


KEYWORD: hit()
Tests if two sprites overlap. This is done using a box test based on the size
of the sprite (e.g. 8x8,16x16,24x24,32x32)
The value returned is zero for no collision, or the lower of the two coordinate
differences from the centre, approximately.
This only works if sprites are positioned via the graphics system ; there is no
way of reading Sprite memory to ascertain where the physical sprites are.

    100 print hit(1,2)


KEYWORD: if then
If has two forms. The first is classic BASIC, e.g. if <condition> then
<do something>. All the code is on one line. The THEN is mandatory - you cannot
write if a = 2 goto 420 (say).
See entry for "if else endif" for the second variant

    100 if name="benny" then my_iq = 70

KEYWORD: if else endif
This is a more complex version of if. It allows multi line conditional
execution, with an optional else clause. This is why there is a death threat
attached to GOTO. This is better.  Note the endif is mandatory, you cannot use
a single line if then else. The instruction does not have to all be on the
same line.

    100 if age < 18
    110     print "child"
    120 else
    130     print "adult"
    140 endif


KEYWORD: image
Draws a possibly scaled or flipped sprite image on the bitmap, using the
standard syntax. Flipping is done using bits 7 and 6 of the mode
(e.g. $80 and $40) in the colour option. This requires both sprites and bitmap
to be on. For more information see the graphics section.

    100 image 4 dim 3 colour 0,$80 to 100,100


KEYWORD: inkey() inkey$()
If a character key has been pressed, return either the character as a string,
or as the ASCII character code. If no key is available return "" or 0.
This uses key presses, it does not detect if a key has been pressed, merely
that it has been in the past. If you want to check whether a key is up or
down, use keydown()

    100 print inkey(),inkey$()


KEYWORD: input
Inputs numbers or strings from the keyboard.
Input has always had a somewhat varying syntax historically. This version uses
the same syntax as print, except that where there is a variable a value is
entered into that variable, rather than the variable being printed.

    100 input "Your name is ?";a$


KEYWORD: int()
Returns the integer part of a number

    100 print int(3.14159)


KEYWORD: isval()
This is a support for val and takes the same parameter, a string  This deals
with the problem with val() that it errors if you give it a non-numeric value.
This checks to see if the string is a valid number  and returns -1 if so, 0
if it is not.

    100 print isval("42")
    110 print isval("i like chips in gravy")


KEYWORD: itemcount()
Together , itemcount and itemget provide a way of encoding multiple data items
in strings. A multiple-element string has a separating character, which can be
any ASCII character, often a comma.
itemcount() takes a string and a separator and returns the number of items in
the string if separated by that separator. The example prints '2' as there are
two elements separated by a comma, the strings hello and world.

    100 print itemcount("hello,world",",")


KEYWORD: itemget$()
Together , itemcount and itemget provide a way of encoding multiple data items
in strings. A multiple-element string has a separating character, which can be
any ASCII character, often a comma.  itemget$() takes three parameters, the
string, the index of the substring required, which starts at '1' and the
separator. A bad index will generate a range error.
The example will print 'lizzie', this being the third item.

    100 print itemget$("paul,jane,lizzie,jack",3,",")



KEYWORD: joyb()
Returns a value indicating the status of the fire buttons on a gamepad, with
the main fire button being bit 0. Takes a single parameter, the number of the
gamepad.

The keyboard keys ZX KM L (left/right/up/down/fire) are also mapped onto this
controller, so a Game Controller is not required.

    100 if joyb(0) & 1 then fire()


KEYWORD: joyx() joyy()
Returns the directional value of a gamepad in the x and y axes respectively as
-1,0 or 1, with 1 being right and down. Each takes a single parameter which is
the number of the pad.

The keyboard keys ZX KM L (left/right/up/down/fire) are also mapped onto this
controller, so a Game Controller is not required.

    100 x = x + joyx(0)
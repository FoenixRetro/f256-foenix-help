
KEYWORD: abs()
Returns the absolute value of the parameter

    10 print abs(-4)


KEYWORD: alloc()
Allocate the given number of bytes of memory and return the address. Can be
used for data structures or program memory for the assembler.

    10 myAssemblerCode = alloc(128)


KEYWORD: asc()
Returns the ASCII value of the first character in the string, or zero if the
string is empty.

10 print asc("*")


KEYWORD: assemble
Initialises an assembler pass. Apart from the simplest bits of code, the
assembler is two pass. It has two parameters. The first is the location in
memory the assembled code should be stored, the second is the mode. At present
there are two mode bits ; bit 0 indicates the pass (0 1st pass, 1 2nd pass)
and bit 1 specifies whether the code is listed as it goes. Normally these
values will be 0 and 1, as the listing is a bit slow. 6502 mnemonics are
typed as is. Two passes will normally be required by wrapping it in a
for/next loop

    100 assemble $6000,1:lda #42:sta count:rts

Normally these are wrapped in a loop for the two passes for forward references.

    100 for pass = 0 to 1
    110 assemble $6000,pass
    120 bra forward
    130 <some code>
    140 .forward:rts
    150 next

This is almost identical to the BBC Microcomputer's inline assembler.


KEYWORD: assert
Every good programming language should have assert. It verifies contracts and
detects error conditions. If the expression following is zero, an error is
produced.

    100 assert myage = 42


KEYWORD: bitmap
Turns the bitmap on or off, or clears it, or sets its address (the default
address is $10000). Only one bitmap is used in BASIC, but you can use others
by accessing I/O. Keywords are ON OFF CLEAR <colour> AT <address> and can be
chained like the example below, or not. On or Off without an at will reset
the address.

    100 bitmap at $18000 on clear $03
    110 bitmap at $18000 on:bitmap clear $03


KEYWORD: bload
Loads a file into memory. The 2nd parameter is the address in full memory
space, *not* the 6502 CPU address. In the default set up, for the RAM area
(0000-7FFF) this will however be the same.

So the example below loads the binary file mypic.bin into the BASIC bitmap,
which is stored in MMU page 8 onwards.

    100 bitmap on:bitmap clear 1
    110 bload "mypic.bin",$10000


KEYWORD: bsave
Saves a chunk of memory into a file. The 2nd parameter is the address in full
memory space, *not* the 6502 CPU address. The 3rd parameter is the number of
bytes to save.

In the default set up, for the RAM area (0000-7FFF) this will however be
the same.

    100 bsave "memory.space",$0800,$7800


KEYWORD: chr$()
Convert an ASCII integer to a single character string.


    100 print chr$(42)


KEYWORD: circle
Draws a circle, using the standard syntax. The vertical height defines the
radius of the circle. See the section on graphics for drawing options

    100 circle here solid to 200,200


KEYWORD: cprint
Operates the same as the print command, but control characters
(e.g. 00-1F,80-FF) are printed using the characters from the FONT memory, not
as control characters. The example below prints a horizontal upper bar
character, not a new line.

    100 cprint chr$(13);


KEYWORD: cursor
Turns the flashing cursor on or off

    100 cursor on


KEYWORD: dir
Shows all the files in the current drive.

    100 dir


KEYWORD: dim
Dimension number or string arrays with up to two dimensions, with a maximum of
254 elements in each dimension.

    100 dim a$(10),a_sine#(10)
    110 dim name$(10,2)


KEYWORD: drive
Sets the current drive for load save. The default drive is zero.

    100 drive 1


KEYWORD: end
Ends the current program and returns to the command line

    100 end


KEYWORD: event()
Event tracks time. It is normally used to activate object movement or events
in a game or other events, and generates true at predictable rates. It takes
two parameters ; a variable and an elapsed time.
If that variable is zero, then this function doesn't return true until after
that many tenths of seconds has elapsed. If it is non-zero, it tracks repeated
events, so if you have event(evt1,70) this will return true every second – the
clock operates at the timer rate, 70Hz.
Note that if a game pauses the event times will continue, so if you use it to
have an event every 20 seconds, this will work – but if you pause the game,
then it will think the game time has elapsed. One way out is to zero the event
variables when leaving pause – this will cause it to fire after another
20 seconds.
If the event variable is set to -1 it will never fire, so this can be used to
create one shots by setting it to -1 in the conditional part of the line
An example is better, this prints Hello once a second.

    100 repeat
    110 if event(myevent1,70) then print "Hello"
    120 until false


KEYWORD: false
Returns the constant zero.

    100 print false


KEYWORD: for next
A loop which repeats code a fixed number of times, which must be executed at
least once. The step is 1 for to and -1 for downto. The final letter on next
is not supported.

    100 for i = 1 to 10:print i:next i
    110 for i = 10 downto 1:print i:next


KEYWORD: frac()
Return the fractional part of a number


    100 print frac(3.14159)

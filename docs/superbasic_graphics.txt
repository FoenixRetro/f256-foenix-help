
The graphics subsystem consists of three components, which is a subset of the
full capabilities of the F256 machines.

Firstly there is an 8x8 pixel tile grid of up to 256x256 tiles, which can be
scrolled about.

Secondly, on top of that is a 320x240 bitmap screen, which can have anything
drawn on it.

Thirdly, on top of that, are the sprites.

The graphics are much more complex than this ; the system allows up to three
tile maps for example. Those can be done in BASIC if you wish, by directly
accessing the system registers, as covered in the hardware reference guide.


BITMAP GRAPHICS

Bitmap Graphics can be done in one of three ways. 

- Firstly, they can be done using BASIC commands like LINE, PLOT and TEXT.
  These are the easiest.
- Secondly, they can be done by directly accessing the graphics library via
  the GFX command.
- Thirdly, you can "hit the hardware" directly using POKE and DOKE or the
  indirection operators.

The latter is the most flexible. BASIC simplifies the graphics system to some
extent to make it easier to use ; for example, the Junior can have up to three
bitmaps, but only one is supported using BASIC commands.

GRAPHICS MODIFIERS AND ACTIONS

Following drawing commands PLOT, LINE, RECT, CIRCLE, SPRITE, CHAR and IMAGE
there are actions and modifiers which either change or cause the command to
be done (e.g. draw the line, draw the string etc.).
Changes persist, so if you set COLOUR 3 or SOLID it will apply to all
subsequent draws until you change it.
Not all things work or make sense for all commands ; you can’t change the
dimensions of a line, or the colour of a hardware sprite.

to 100,100 > Draws the object from the current point to the new point, or at
             the new point

from 10,10 > Sets the current point, but doesn’t draw. So you have
             RECT 10,10 TO 100,100. Note that PLOT requires TO to do something,
             which is a little odd but consistent. The FROM is optional, but
             must be used where a number precedes the coordinates
             (e.g. you can’t do COLOUR 5 100,200)
here       > Same as TO but done at the current point
by 4,5     > Same as TO but offset from the current point by 4 horizontal,
             5 vertical
solid      > Causes shapes to be filled in
outline    > Causes shapes to be drawn in outline
dim 3      > Sets the size of scalable objects (CHAR, IMAGE) from 1 to 8.
colour 4   > Synonyms due to American misspelling, sets the current drawing
color 5      colour from LUT 0, which is set up as RRRGGGBB. colour from
             LUT 0, which is set up as  RRRGGGBB.


SOME USEFUL EXAMPLES

All these examples begin "bitmap on:cls:bitmap clear 3" ; display and clear the
bitmap, then fill it with colour 3 - this is 0000 0011 - and the colour by
default is RRRG GGBB in binary - so this is Blue

Some lines:

| 100 bitmap on:cls:bitmap clear 3
| 110 line colour $1E from 10,10 to 100,200 to 200,50 to 10,10 by 0,20


Note how you can chain commands  and also the use of the relevant position
"by" which means from here.

Some circles:

| 100 bitmap on:cls:bitmap clear 3
| 110 circle solid colour $1E outline 10,10 to 200,200 solid 10,10 to 30,30


Rectangles are the same. Currently we cannot draw ellipses.

Some text:

| 100 bitmap on:cls:bitmap clear 3
| 110 text "Hello there" dim 1 colour $FC to 10,10 dim 3 to 10,40


Drawing text from the font library in Vicky. These characters can be redefined.

Some pixels:

| 100 bitmap on:cls:bitmap clear 3
| 110 repeat
| 120 plot color random(256) to random(320),random(230)
| 130 until false


Press break to stop this one. Note you have to write "Plot To" here.


RANGES

The range of values for draw commands is 0–319 and normally 0–239, though there
is a VGA mode which is 320x200 (in which case it would be 0-199).

Colours are values from 0-255 - initially this can be viewed as a binary
number RRRG GGBB

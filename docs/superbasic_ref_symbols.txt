
KEYWORD: !
! is an indirection operator that does a similar job to DEEK and DOKE, e.g.
accesses memory. It can be used either in unary fashion (!47 reads the word at
location 47) or binary (a!4 reads the word at the value in address a+4). It can
also appear on the left-hand side of an assignment statements when it functions
as a DOKE, writing a 16 bit value in low/high order.
It reads or writes a 16 bit address in the 6502 memory map.

    10 !a = 42
    20 print !a
    30 print a!b
    40 a!b=12


KEYWORD: ' and rem
Comment. ‘ and rem are synonyms.  The rest of the line is ignored. The only
difference between the two is when listing, ‘ comments show up in reverse to
highlight them. Remarks should be in quotes for syntactic consistency.

    10 ' "This is a title comment"
    20 REM
    30 REM "Another comment"

KEYWORD: # and $
# and $ are used to type variables. # is a floating point value, $ is a string.
The default type is integer. Variables are not stored internally by name but by
reference. This means they are quick to access but means they are always in
existence from the start of a program if used in it. Integers are 32 bit
; Floats have a 31 bit mantissa and byte exponent.
So variables and arrays are as follows:

    100 an_integer  = 42
    110 a_float#  = 3.14159
    120 a_string$ = "hello world"


KEYWORD: ?
? is an indirection operator that does a similar job to PEEK and POKE, e.g.
accesses memory. It is the same as ? except it operates on a byte level.

    100 ?a = 42
    110 print ?a
    120 print a?b
    130 a?b=12


KEYWORD: $
Hexadecimal constant prefix. $2A is the same as the decimal constant 42.

    100 print $2a
    110 !$7ffe = 31702


KEYWORD: *
Multiply

    100 print 4*2


KEYWORD: +
Add or string concatenation.

    100 sum = 4+2
    110 prompt$ = "hello "+"world !"


KEYWORD: -
Subtract

    100 print 44 – 2


KEYWORD: %
Binary modulus operator. The second value must be non-zero.

    100 print 42 % 5


KEYWORD: .
Sets the following label to the current assembler address. So the example below
sets the label 'mylabel' at the current address and you can write things like
bra mylabel. Note also that this is an integer variable.

    100 .mylabel


KEYWORD: / and \
Signed division. An error occurs if the divisor is zero. Backslash is integer
division, forwar slash returns a floating point value.

    100 print 22/7
    110 print 22\7


KEYWORD: < <= <> = > >=
Comparison binary operators, which return 0 for false and -1 for true. They can
be used to either compare two numbers or two strings.

    100 if a<42 then "a is not the answer to life the universe and everything"
    110 if name$="" then input name$


KEYWORD: @
Returns the address of a l-expr, normally this is a variable of some sort, but
it can be an array element or even an indirection. (print @!42 prints 42, the
address of expression !42, not that it’s useful at all ….)

    100 print @fred, @a(4)



KEYWORD: &
Binary and operator. This is a binary operator not a logical, e.g. it is the
binary and not a logical and so it can return values other than true and false

    100 print count & 7


KEYWORD: <Hat Character>
Binary exclusive or operator. This is a binary operator not a logical, e.g. it
is the binary and not a logical and so it can return values other than true
and false

    100 print a^$0E


KEYWORD: |
Binary or operator. This is a binary operator not a logical, e.g. it is the
binary and not a logical and so it can return values other than true and false

    100 print read.value | 4


KEYWORD: << >>
Binary operators which shift an integer left or right a certain number of times
logically. Much quicker than multiplication.

    100 print a << 2,32 >> 2